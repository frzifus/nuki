// Copyright 2018 The Authors. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.

package nuki

import (
	"time"
)

const (
	StateUncalibrated    State = 0
	StateLocked          State = 1
	StateUnlocking       State = 2
	StateUnlocked        State = 3
	StateLocking         State = 4
	StateUnlatched       State = 5
	StateUnlockedLockNgo State = 6
	StateUnlatching      State = 7
	StateMotorBlocked    State = 254
	StateUndefined       State = 255

	ActionUnlock             Action = 1
	ActionLock               Action = 2
	ActionUnlatch            Action = 3
	ActionLockNgo            Action = 4
	ActionLockNgoWithUnlatch Action = 5
)

type State int

var StateName = map[int]string{
	0:   "UNCALIBRATED",
	1:   "LOCKED",
	2:   "UNLOCKING",
	3:   "UNLOCKED",
	4:   "LOCKING",
	5:   "UNLATCHED",
	6:   "UNLOCKED_LOCK_N_GO",
	7:   "UNLATCHING",
	254: "MOTOR_BLOCKED",
	255: "UNDEFINED",
}

var StateValue = map[string]int{
	"UNCALIBRATED":       0,
	"LOCKED":             1,
	"UNLOCKING":          2,
	"UNLOCKED":           3,
	"LOCKING":            4,
	"UNLATCHED":          5,
	"UNLOCKED_LOCK_N_GO": 6,
	"UNLATCHING":         7,
	"MOTOR_BLOCKED":      254,
	"UNDEFINED":          255,
}

type Action int

var ActionName = map[int]string{
	1: "UNLOCK",
	2: "LOCK",
	3: "UNLATCH",
	4: "LOCK_N_GO",
	5: "LOCK_N_GO_WITH_UNLATCH",
}

// Action_Lock_value represents ...
var ActionValue = map[string]int{
	"UNLOCK":                 1,
	"LOCK":                   2,
	"UNLATCH":                3,
	"LOCK_N_GO":              4,
	"LOCK_N_GO_WITH_UNLATCH": 5,
}

type BridgesResponse struct {
	Bridges   []Bridge `json:"bridges"`
	ErrorCode int      `json:"errorCode"`
}

type AuthReponse struct {
	Token   string `json:"token"`
	Success bool   `json:"success"`
}

type ConfigAuthResponse struct {
	Success string `json:"success"`
}

type ListResponse struct {
	NukiID         int            `json:"nukiId"`
	Name           string         `json:"name"`
	LastKnownState LastKnownState `json:"lastKnownState"`
}

type LockStateResponse struct {
	State           int    `json:"state"`
	StateName       string `json:"stateName"`
	BatteryCritical bool   `json:"batteryCritical"`
	Success         bool   `json:"success"`
}

type UnpairResponse struct {
	Success string `json:"success"`
}

type InfoResponse struct {
	BridgeType      int          `json:"bridgeType"`
	Ds              Ds           `json:"ds"`
	Versions        Versions     `json:"versions"`
	Uptime          int          `json:"uptime"`
	CurrentTime     time.Time    `json:"currentTime"`
	ServerConnected bool         `json:"serverConnected"`
	ScanResults     []ScanResult `json:"scanResults"`
}

type Versions struct {
	FirmwareVersion     string `json:"firmwareVersion"`
	WifiFirmwareVersion string `json:"wifiFirmwareVersion"`
}

type Ds struct {
	HardwareID int `json:"hardwareId"`
	ServerID   int `json:"serverId"`
}

type ScanResult struct {
	NukiID int    `json:"nukiId"`
	Name   string `json:"name"`
	Rssi   int    `json:"rssi"`
	Paired bool   `json:"paired"`
}

type LastKnownState struct {
	State           int       `json:"state"`
	StateName       string    `json:"stateName"`
	BatteryCritical bool      `json:"batteryCritical"`
	Timestamp       time.Time `json:"timestamp"`
}

type Bridge struct {
	BridgeID    int    `json:"bridgeId"`
	IP          string `json:"ip"`
	Port        int    `json:"port"`
	DateUpdated string `json:"dateUpdated"`
}

type LockActionResponse struct {
	Success         bool `json:"success"`
	BatteryCritical bool `json:"batteryCritical"`
}

type CallbackReponse struct {
	Success   bool        `json:"success"`
	Callbacks []Callbacks `json:"callbacks"`
}

type Callbacks struct {
	ID  int    `json:"id"`
	URL string `json:"url"`
}

type AutoGenerated struct {
}

type LogResponse []Log

type Log struct {
	Timestamp time.Time `json:"timestamp"`
	Type      string    `json:"type"`
}
